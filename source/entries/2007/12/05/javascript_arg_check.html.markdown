---
title: 関数の引数を存在確認するための高速化Tips
date: 2007/12/05 04:05:22
tags: javascript
published: true

---

<p><a href="http://blog.katsuma.tv/2007/12/javascript_arg_check_2.html">（2007/12/12 追記）内容をまとめ直し＋再考しました。</a></p>

<p>JavaScriptで関数の引数チェック行う場合に、「どんなチェック方法が速いのか？」な話。</p>  <p>たとえば、引数が存在する場合は「その引数」を、存在しない場合は「bar」を返す、という場面を想定します。単純に考えるとこんな感じ。</p>  <pre>function check(arg){<br />        if(arg) {<br />                return arg;<br />        } else {<br />                return &#39;bar&#39;;<br />        }<br />}<br /></pre>   <p>うーん、nullチェックをする、って方法も考えられます。</p><pre>function check(arg){<br />        if(arg != null){<br />                return arg;<br />        } else {<br />                return &#39;bar&#39;;<br />        }<br />}<br /></pre>   <p>typeof で確認って方法もありますね。</p><pre>function check(arg){<br />        if(typeof arg != &#39;undefined&#39;){<br />                return arg;<br />        } else {<br />                return &#39;bar&#39;;<br />        }<br />}<br /></pre> <p>条件を限定して、引数が「foo」の場合はfooを返す、という場合はこう書けます。</p> <pre>function check(arg){<br />        if(arg==&#39;foo&#39;){<br />                return arg;<br />        } else {<br />                return &#39;bar&#39;;<br />        }<br />}<br /></pre>   <p>と、引数確認だけでもパっと思いついただけでも、これだけ思いつきます。（もっと全然違うパターンがあるよ！な場合はTBかコメントで教えてください！）</p>  <p>あと、もっと突っ込むとif文ではなく、三項演算子を使うとワンライナーでも書けてしまいます。たとえば一番最初の場合だと</p>  <pre>function check(arg){<br />        return arg || &#39;bar&#39;;<br />}<br /></pre><p>こんな感じに。（2007/12/05 15:00追記：この場合はワンライナーで書いてるけども、三項演算子を利用しているわけではないですね）</p>   <h3>どう書けば速いの？</h3> <p>単純に疑問に思ったので、ざっとテストコードを書いてベンチマーク取ってみました。検証コードはこちら。</p>

<p>&nbsp;</p><pre>function checkStrNoIf(arg){<br />	return (arg==&#39;foo&#39;)? arg : &#39;bar&#39;;<br />}<br /><br />function checkStrIf(arg){<br />	if(arg==&#39;foo&#39;){<br />		return arg;<br />	} else {<br />		return &#39;bar&#39;;<br />	}<br />}<br /><br /><br />function checkArgsNoIf(arg){<br />	return arg || &#39;bar&#39;;<br />}<br /><br />function checkArgsIf(arg){<br />	if(arg) {<br />		return arg;<br />	} else {<br />		return &#39;bar&#39;;<br />	}<br />}<br /><br /><br />function checkNullNoIf(arg){<br />	return (arg!=null)? arg : &#39;bar&#39;;<br />}<br /><br />function checkNullIf(arg){<br />	if(arg != null){<br />		return arg;<br />	} else {<br />		return &#39;bar&#39;;<br />	}<br />}<br /><br /><br />function checkTypeNoIf(arg){<br />	return (typeof(arg) != &#39;undefined&#39;)? arg : &#39;bar&#39;;<br />}<br /><br />function checkTypeIf(arg){<br />	if(typeof arg != &#39;undefined&#39;){<br />		return arg;<br />	} else {<br />		return &#39;bar&#39;;<br />	}<br />}<br /><br /><br />// logging<br />function log(){<br />	//return console.log.apply(this, arguments);<br />	return print.apply(this, arguments);<br />}<br /><br />// bench<br />var s, e;<br />var c = 100000;<br /><br />s = new Date();<br />for(var i=0; i&lt;c; i++){<br />	checkStrNoIf();<br />}<br />e = new Date();<br />log(&quot;[checkStrNoIf]&quot; + (e-s));<br /><br /><br />s = new Date();<br />for(var i=0; i&lt;c; i++){<br />	checkStrIf();<br />}<br />e = new Date();<br />log(&quot;[checkStrsIf]&quot; + (e-s));<br /><br /><br />s = new Date();<br />for(var i=0; i&lt;c; i++){<br />	checkArgsNoIf();<br />}<br />e = new Date();<br />log(&quot;[checkArgsNoIf]&quot; + (e-s));<br /><br />s = new Date();<br />for(var i=0; i&lt;c; i++){<br />	checkArgsIf();<br />}<br />e = new Date();<br />log(&quot;[checkArgsIf]&quot; + (e-s));<br /><br /><br />s = new Date();<br />for(var i=0; i&lt;c; i++){<br />	checkNullNoIf();<br />}<br />e = new Date();<br />log(&quot;[checkNullNoIf]&quot; + (e-s));<br /><br /><br />s = new Date();<br />for(var i=0; i&lt;c; i++){<br />	checkTypeNoIf();<br />}<br />e = new Date();<br />log(&quot;[checkTypeNoIf]&quot; + (e-s));<br /></pre> <p>&nbsp;</p>   <p>要するに、冒頭で上げた４ケースにそれぞれif文を使う場合、使わない場合でそれぞれ10万回ループで回して実行時間を比較。検証環境はFedora7上のSpiderMonkeyで。Firefox2上での比較、と考えてほぼ問題ないと思います。（SpiderMonkeyって何ぞや？とかインストール方法とかはまた別記事で書きます）</p>  <h3>実行と検証</h3> <p>実行結果はこんな感じになりました。</p><pre>$ js -f args.js<br />[checkStrNoIf]522<br />[checkStrIf]541<br />[checkArgsNoIf]538<br />[checkArgsIf]533<br />[checkNullNoIf]538<br />[checkTypeNoIf]592<br /></pre>   <p>なかなか面白い結果になっています。ざっくりまとめるとこんな感じ。</p>  <ul> <li>if文を使うより<strong>三項演算子の方が高速</strong></li> <li>typeofで比較する場合は三項演算子の方が顕著に高速</li> <li>文字列比較できる場合は、<strong>素直に文字列比較した方が良い</strong></li> <li>文字列比較＜引数確認＜null確認＜typeof確認</li> <li><strong>typeof確認はコストが大きい</strong></li> </ul>  <h3>まとめ</h3> <p>三項演算子ってif文のエイリアスみたいなもんだと思ってた。中身は等価というか。結構露骨に速度に関わってくるのが意外ですねぇ。コード読みづらくなるケースが多いけど、可能な限りで積極的に使っちゃっていいのかもしれません。三項演算子++</p>  <p>あと、typeofは結構使うケースが多いのも事実なのですが、これも可能な限り避ける方がよさそうですね。</p> 
