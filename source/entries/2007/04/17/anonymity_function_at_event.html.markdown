---
title: イベント発生時に無名関数を実行
date: 2007/04/17 03:13:21
tags: javascript
published: true

---

<p>
HTMLの任意の要素に対して、JavaScriptではonClick, onLoadなどのイベントハンドラに処理を直接結びつけることができます。たとえばこんなかんじ。
</p>

<p>
<pre>
&lt;a href="#" onClick="window.alert('Hello, World!');"&gt;こんにちわ！&lt;/a&gt;
</pre>
</p>

<p>
こうすると「こんにちわ！」をクリックすると「Hello, World!」のウィンドウが表示されます。至極簡単。
ただ、HTMLの中にJavaScriptを埋め込む記法はどうなんだ？という意見も当然あるかと思いますが、ここではそれについては割愛。実際、僕も最近はほとんどPrototype.jsのEvent.observe()を使って、イベントに対する処理はまとめて定義しちゃうことが多いです。
</p>

<p>さて、話は戻って上記の話をさらにすすめることに。今度は複数の処理を逐次処理させることにします。一番簡単なのは、逐次処理の内容を１つの関数にまとめておいて、その関数をイベント発生時に呼び出す方法。たとえばこんな感じ。</p>

<p>
<pre>
function hello(){
 document.title="こんにちわ!";
 window.alert("こんにちわ!!");
}
</pre>
</p>

<p>
こんなのを定義しておいて
<pre>
&lt;a href="#" onClick="hello();"&gt;徹底的に挨拶&lt;/a&gt;
</pre>
</p>

<p>
こうやって呼び出すとOK。ただし、グローバルな領域にhelloが汚染するのは少し気持ち悪いです。特にイベント発生時に呼び出される処理が単純なものであればあるほど、グローバルな領域は可能な限りクリーンにしておきたい限り。
</p>

<p>と、いうわけでこういうときには無名関数を使うのがオススメ。そうするとかなりスッキリと書くことができます。実際のコードはこんな感じ。</p>

<p>
<pre>
&lt;a href="#" onClick="(function(){ document.title="こんにちわ!"; window.alert("こんにちわ!!");})()"&gt;徹底的に挨拶&lt;/a&gt;
</pre>
</p>

<p>
ポイントは<b>(</b>function(){}<b>)()</b>の箇所。ちょっと分かりにくいかもしれませんが、「function(){}」自体を「( )」で囲って、直後に「( )」と書くことで、その場で実行しているところです。この方法を使うことで、グローバルな領域は汚染することなく、簡単な処理から少し複雑な処理までをイベントに結びつけることができます。
</p>

<p>
最初はonClick="function(){処理}" という書き方をしていたのですが、これだと中の処理が実行されなくて、うーん。。。と困っていたのですが、要するにこれだとイベント発生時に無名関数を定義しているだけで、実際の処理は行われない、ってことのよう（で、いいのかな？）定義した内容を実際に処理させるためにも、最後の「( )」が効いてくるわけです。
</p>

<p>余談ですが、Googleのサービスの何かのJavaScript（Gmailか何か）は、超膨大なコード量にもかかわらず、全コードを<b>(function(){膨大な処理})()</b>という記法をしていたことがありました。今もそのままかどうかは分かりませんが、当時はこの書き方が謎だったのですが、今思えばこれもグローバル領域の汚染を回避する方法だったんですね。これくらいの徹底した姿勢には、うーんさすが。。と思わされるところがあります。</p>
